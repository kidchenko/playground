type: edu
custom_name: Sealed classes
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 72
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 72
    initialized_from_dependency: false
    possible_answer: expr.value
    selected: false
    status: Unchecked
  - offset: 101
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 101
    initialized_from_dependency: false
    possible_answer: eval(expr.left) + eval(expr.right)
    selected: false
    status: Unchecked
  - offset: 119
    length: 14
    placeholder_text: interface Expr
    initial_state:
      length: 14
      offset: 119
    initialized_from_dependency: false
    possible_answer: sealed class Expr
    selected: false
    status: Unchecked
  - offset: 162
    length: 4
    placeholder_text: Expr
    initial_state:
      length: 4
      offset: 162
    initialized_from_dependency: false
    possible_answer: Expr()
    selected: false
    status: Unchecked
  - offset: 212
    length: 4
    placeholder_text: Expr
    initial_state:
      length: 4
      offset: 212
    initialized_from_dependency: false
    possible_answer: Expr()
    selected: false
    status: Unchecked
  text: |-
    fun eval(expr: Expr): Int =
            when (expr) {
                is Num -> TODO()
                is Sum -> TODO()
            }

    interface Expr
    class Num(val value: Int) : Expr
    class Sum(val left: Expr, val right: Expr) : Expr
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    import org.junit.Assert
    import org.junit.Test

    class TestSealedClasses {
        @Test(timeout = 1000)
        fun testNum() {
            Assert.assertEquals("'eval' on Num(2) works incorrectly\n", 2, eval(Num(2)))
        }

        @Test(timeout = 1000)
        fun testSum() {
            Assert.assertEquals("'eval' on Sum(Num(2), Num(1)) works incorrectly\n", 3, eval(Sum(Num(2), Num(1))))
        }

        @Test(timeout = 1000)
        fun testRecursion() {
            Assert.assertEquals("'eval' on Sum(Sum(Num(1), Num(2)), Num(3)) works incorrectly\n", 6, eval(Sum(Sum(Num(1), Num(2)), Num(3))))
        }
    }
  learner_created: false
status: Unchecked
record: -1
